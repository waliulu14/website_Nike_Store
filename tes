const windowTitleToColor: Record<string, string> = {};

  return events
    .filter((item: Events) => {
      const eventDate = moment.utc(item.timestamp);
      return (
        eventDate.date() === date.getDate() &&
        eventDate.month() === date.getMonth() &&
        eventDate.year() === date.getFullYear()
      );
    })
    .flatMap((item: any) => {
      const { startTimestamp, endTimestamp } = convertToJakartaTime(
        item.timestamp,
        item.duration
      );
      if (type === "window" && item.data.title !== "") {
        const name = item.data.title;
        const color =
          windowTitleToColor[name] ||
          windowColors[
            Object.keys(windowTitleToColor).length % windowColors.length
          ];
        windowTitleToColor[name] = color;
        return [
          {
            name,
            color,
            data: [
              {
                x: "Windows",
                y: [startTimestamp, endTimestamp],
              },
            ],
          },
        ] as ChartData[];
      } else if (type === "input" && item.data.presses) {
        const name = `Keyboard Presses ${item.data.presses.toString()}`;
        const color = "#080C88";
        return [
          {
            name,
            color,
            data: [
              {
                x: "Input",
                y: [startTimestamp, endTimestamp],
              },
            ],
          },
        ] as ChartData[];
      } else {
        return [];
      }
    });
};

function Timeline({
  stats,
  dateSelected,
  changeDateHandler,
}: {
  stats: filteredEvents;
  dateSelected: Date;
  changeDateHandler: (date: Date) => void;
}) {
  const [calendar, setCalendar] = useState<boolean>(false);
  const [dateNow, setDateNow] = useState<Date>(dateSelected);
  const dateString = moment(dateNow).format("DD MMMM YYYY");
  const DateTimestamp = new Set<string>();
  stats.windowEvents.forEach((value) => {
    const date = new Date(value.timestamp);
    DateTimestamp.add(date.toISOString().split("T")[0]);
  });

  const chartDataWindow: ChartData[] = filterAndFormatData(
    stats.windowEvents,
    dateNow,
    "window"
  );
  const chartDataInput: ChartData[] = filterAndFormatData(
    stats.inputEvents,
    dateNow,
    "input"
  );
  const chartDataAfk: ChartData[] = filterAndFormatData(
    stats.afkEvents,
    dateNow,
    "afk"
  );
  const chartDataCursor: ChartData[] = filterAndFormatData(
    stats.cursorEvents,
    dateNow,
    "cursor"
  );
  const chartData: ChartData[] = [
    ...chartDataWindow,
    ...chartDataInput,
    ...chartDataAfk,
    ...chartDataCursor,
  ];

  return (
    <div>
      <Card extra="!p-[20px] text-center">
        <button
          className="flex items-center justify-center gap-2 p-2 mt-1 text-gray-600 transition duration-200 rounded-lg linear bg-lightPrimary hover:cursor-pointer hover:bg-gray-100 active:bg-gray-200 dark:bg-navy-700 dark:hover:opacity-90 dark:active:opacity-80"
          onClick={() => setCalendar(!calendar)}
        >
          <MdOutlineCalendarToday />
          <span className="text-sm font-medium text-gray-600">
            {calendar ? "Close" : "Select a month"}
          </span>
        </button>

        {calendar ? (
          <div className="absolute z-10 mt-10">
            <MiniCalendar
              value={dateSelected}
              onChange={changeDateHandler}
              view={"month"}
              tileDisabled={({ date }: { date: Date }) => {
                const jakartaDate = moment(date).tz("Asia/Jakarta");
                const formattedDate = jakartaDate.format("YYYY-MM-DD");
                const isDateDisabled = DateTimestamp.has(formattedDate);

                return !isDateDisabled;
              }}
            />
          </div>
        ) : null}
        {chartData.length > 0 ? (
          <div>
            <p className="mt-[20px] text-3xl font-bold text-navy-700 dark:text-white">
              {dateString}
            </p>
            <p className="mt-2 text-sm text-center text-gray-600">
              This is the timeline with windows events, input events and afk events
            </p>
            <TimeLineChart
              chartData={chartData}
              chartOptions={TimelineChartOptions}
            />
          </div>
        ) : (
          <p className="mt-[20px] text-3xl font-bold text-navy-700 dark:text-white">
            Please Select a Date
          </p>
        )}
      </Card>
      <Card extra="!p-[30px] gap-x-5 mt-7 text-center">
        <LineChartLine
          chartData={chartData}
          chartOptions={TimelineChartOptions}
        />
      </Card>
